{"version":3,"sources":["containers/App/ReceiptList/Receipt/ReceiptHeader/Categories/Categories.tsx","components/BaseButton/BaseButton.tsx","containers/App/ReceiptList/Receipt/ReceiptHeader/ReceiptHeader.tsx","containers/App/ReceiptList/Receipt/ExpensesList/Expense/Expense.tsx","contexts/PriceContext.tsx","containers/App/ReceiptList/Receipt/ExpensesList/ExpensesList.tsx","components/Money/Money.tsx","containers/App/ReceiptList/Receipt/ReceiptFooter/ReceiptFooter.tsx","containers/App/ReceiptList/Receipt/Receipt.tsx","containers/App/ReceiptList/ReceiptList.tsx","containers/App/Footer/Footer.tsx","containers/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Categories","useState","selected","setSelected","categories","setCategories","className","Dropdown","Toggle","variant","id","Menu","map","value","Item","onClick","array","index","indexOf","splice","push","clicked","key","uuid","href","BaseButton","text","ReceiptHeader","addExpense","Expense","note","price","changed","m_note","setNote","m_price","setPrice","onChange","event","target","placeholder","type","Number","PriceContext","createContext","PriceContextProvider","state","receipts","setFooterPrice","val","totalPrice","money","setState","Provider","this","props","children","Component","ExpensesList","expenses","setTotalPrice","m_expenses","setExpenses","useContext","useEffect","expense","changeExpenses","Money","ReceiptFooter","Receipt","receiptPrice","ReceiptList","rows","i","renderList","Footer","createReceipt","App","setReceipts","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a8a363bf.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport \"./categories.scss\"\r\nimport {Dropdown} from \"react-bootstrap\";\r\nimport uuid from \"uuid/v4\";\r\n\r\nconst Categories = () => {\r\n    const [selected, setSelected] = useState<string>(\"food\");\r\n    const [categories, setCategories] = useState<string[]>([\"household\", \"transport\"]);\r\n\r\n    const clicked = (value: string) => {\r\n        if(value !== selected){\r\n            let array = [...categories];\r\n            let index = array.indexOf(value);\r\n            array.splice(index, 1);\r\n            array.push(selected);\r\n            setCategories(array);\r\n            setSelected(value)\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"categories\">\r\n            <Dropdown>\r\n                <Dropdown.Toggle variant=\"light\" id=\"dropdown-basic\">\r\n                    {selected}\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                    {categories.map(value => (<Dropdown.Item onClick={() => clicked(value)} key={uuid()} href=\"#/\">{value}</Dropdown.Item>))}\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Categories;","import React, {FunctionComponent} from 'react';\r\nimport \"./base-button.scss\"\r\n\r\nconst BaseButton: FunctionComponent<BaseButtonInterface> = ({text, clicked}) => {\r\n    return (\r\n        <div onClick={clicked} className=\"base-button\">\r\n            {text}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BaseButton;\r\n\r\ninterface BaseButtonInterface {\r\n    text: string,\r\n    clicked: () => void\r\n}","import React, {FunctionComponent} from 'react';\r\nimport Categories from \"./Categories/Categories\";\r\nimport \"./receipt_header.scss\"\r\nimport BaseButton from \"../../../../../components/BaseButton/BaseButton\";\r\n\r\nconst ReceiptHeader: FunctionComponent<ReceiptHeaderInterface> = ({addExpense}) => {\r\n    return (\r\n        <div className=\"receipt-header\">\r\n            <Categories/>\r\n            <div className=\"button\">\r\n                <BaseButton clicked={() => addExpense()} text={\"Add expense\"}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReceiptHeader;\r\n\r\ninterface ReceiptHeaderInterface {\r\n    addExpense: () => void\r\n}","import React, {FunctionComponent, useState} from 'react';\r\nimport \"./expense.scss\"\r\nimport MExpenseInterface from \"../../../../../../types/ExpenseInterface\";\r\nimport HandleEventInterface from \"../../../../../../types/HandleEventInterface\";\r\n\r\nconst Expense: FunctionComponent<ExpenseInterface> = ({note, price, id, changed}) => {\r\n    const [m_note, setNote] = useState<string>(note);\r\n    const [m_price, setPrice] = useState<number>(price);\r\n    const changeNote = (event: HandleEventInterface) => {\r\n        setNote(event.target.value);\r\n        changed({note: event.target.value, price: m_price, id});\r\n    };\r\n    const changePrice = (event: HandleEventInterface) => {\r\n        setPrice(Number(event.target.value));\r\n        changed({note: m_note, price: Number(event.target.value), id});\r\n    };\r\n    return (\r\n        <div className=\"expense\">\r\n            <input onChange={changeNote} placeholder={\"note\"} type={\"text\"} value={m_note}/>\r\n            <input onChange={changePrice} placeholder={\"price\"} type={\"number\"} value={m_price}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Expense;\r\n\r\ninterface ExpenseInterface {\r\n    note: string,\r\n    id: string,\r\n    price: number,\r\n    changed: (expense: { note: string; price: number, id: string }) => void\r\n}\r\n","import React, {Component, createContext} from 'react';\r\n\r\nexport const PriceContext = createContext(null);\r\n\r\nclass PriceContextProvider extends Component<PropsInterface, StateInterface>{\r\n    state = {\r\n        receipts: [] as Receipt[],\r\n        price: 0\r\n    };\r\n\r\n    setFooterPrice = (price: number, id: string) => {\r\n        let index = this.state.receipts.map((val) => {return val.id}).indexOf(id);\r\n        if(index >= 0){\r\n            let receipts = [...this.state.receipts];\r\n            receipts[index].totalPrice = price;\r\n            let money = 0;\r\n            receipts.map(value => {\r\n                money+=value.totalPrice;\r\n                return value;\r\n            });\r\n\r\n            this.setState({\r\n                receipts,\r\n                price: money\r\n            });\r\n        }else{\r\n            this.setState({\r\n                price: this.state.price + price,\r\n                receipts: [...this.state.receipts, {totalPrice: price, id}]\r\n            });\r\n        }\r\n    };\r\n    render(): React.ReactElement<any, string> {\r\n        return (\r\n            <PriceContext.Provider value={{...this.state, setFooterPrice: this.setFooterPrice}}>\r\n                {this.props.children}\r\n            </PriceContext.Provider>\r\n        )\r\n    }\r\n}\r\nexport default  PriceContextProvider;\r\n\r\ninterface StateInterface {\r\n    price: number,\r\n    receipts: Receipt[]\r\n}\r\ninterface PropsInterface {}\r\ninterface Receipt {totalPrice: number, id:string}","import React, {ContextType, FunctionComponent, useContext, useEffect, useState} from 'react';\r\nimport \"./expenses-list.scss\"\r\nimport Expense from \"./Expense/Expense\";\r\nimport ExpenseInterface from \"../../../../../types/ExpenseInterface\";\r\nimport uuid from \"uuid/v4\";\r\nimport {PriceContext} from \"../../../../../contexts/PriceContext\";\r\n\r\nconst ExpensesList: FunctionComponent<ExpensesListInterface> = ({expenses, setTotalPrice}) => {\r\n    const [m_expenses, setExpenses] = useState<ExpenseInterface[]>(expenses);\r\n    const [id] = useState<string>(uuid);\r\n\r\n    const {setFooterPrice} = useContext(PriceContext);\r\n\r\n    useEffect(()=>{setExpenses(expenses)}, [expenses]);\r\n\r\n    const changeExpenses = (id: string, note: string, price: number) => {\r\n        let index = m_expenses.map((val) => {return val.id}).indexOf(id);\r\n        m_expenses[index].price = price;\r\n        m_expenses[index].note = note;\r\n        setPrice();\r\n    };\r\n    const setPrice = () => {\r\n        let totalPrice = 0;\r\n        m_expenses.map(value => {\r\n            totalPrice+=value.price;\r\n            return value\r\n        });\r\n        setTotalPrice(totalPrice);\r\n        setFooterPrice(totalPrice, id);\r\n    };\r\n    return (\r\n        <form className=\"expenses-list\">\r\n            {m_expenses.map(value => (\r\n                <Expense changed={(expense: ExpenseInterface) => changeExpenses(expense.id, expense.note, expense.price)}\r\n                         key={uuid()} note={value.note} price={value.price} id={value.id}/>\r\n            ))}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default ExpensesList;\r\n\r\ninterface ExpensesListInterface {\r\n    expenses: ExpenseInterface[],\r\n    setTotalPrice: (totalPrice: number) => void\r\n}\r\n","import React, {FunctionComponent} from 'react';\r\nimport \"./money.scss\"\r\n\r\nconst Money:FunctionComponent<MoneyInterface> = ({money}) => {\r\n    return (\r\n        <div className=\"money\">\r\n            {money}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Money;\r\ninterface MoneyInterface {\r\n    money: number\r\n}","import React, {FunctionComponent, useContext} from 'react';\r\nimport \"./receipt_footer.scss\"\r\nimport Money from \"../../../../../components/Money/Money\";\r\nimport {PriceContext} from \"../../../../../contexts/PriceContext\";\r\n\r\nconst ReceiptFooter: FunctionComponent<ReceiptFooterInterface> = ({totalPrice}) => {\r\n    return (\r\n        <div className=\"receipt-footer\">\r\n            <div>\r\n                Total\r\n            </div>\r\n            <Money money={totalPrice}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReceiptFooter;\r\n\r\ninterface ReceiptFooterInterface {\r\n    totalPrice: number\r\n}","import React, {FunctionComponent, useState} from 'react';\r\nimport \"./receipt.scss\"\r\nimport ReceiptHeader from \"./ReceiptHeader/ReceiptHeader\";\r\nimport ExpensesList from \"./ExpensesList/ExpensesList\";\r\nimport ReceiptFooter from \"./ReceiptFooter/ReceiptFooter\";\r\nimport ExpenseInterface from \"../../../../types/ExpenseInterface\";\r\nimport uuid from \"uuid/v4\";\r\n\r\nconst Receipt:FunctionComponent<ReceiptListInterface> = () => {\r\n    const [expenses, setExpenses] = useState<ExpenseInterface[]>([]);\r\n    const [totalPrice, setTotalPrice] = useState<number>(0);\r\n    const addExpense = () => {\r\n        setExpenses([...expenses, {note: '', price: 0, id: uuid()}]);\r\n    };\r\n    const setReceiptPrice = (receiptPrice: React.SetStateAction<number>) => {\r\n        setTotalPrice(receiptPrice)\r\n    };\r\n    return (\r\n        <article>\r\n            <ReceiptHeader addExpense={addExpense}/>\r\n            <ExpensesList setTotalPrice={setReceiptPrice} expenses={expenses}/>\r\n            <ReceiptFooter totalPrice={totalPrice}/>\r\n        </article>\r\n    );\r\n};\r\n\r\nexport default Receipt;\r\ninterface ReceiptListInterface {\r\n\r\n}","import React, {FunctionComponent} from 'react';\r\nimport \"./receipt_list.scss\"\r\nimport Receipt from \"./Receipt/Receipt\";\r\n\r\nconst ReceiptList: FunctionComponent<ReceiptListInterface> = ({receipts}) => {\r\n    const renderList = () => {\r\n        let rows = [];\r\n        for(let i = 0; i < receipts; i++) {\r\n            rows.push(<Receipt key={i}/>);\r\n        }\r\n        return rows\r\n    };\r\n    return (\r\n\r\n        <main>\r\n            {renderList()}\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default ReceiptList;\r\n\r\ninterface ReceiptListInterface {\r\n    receipts: number;\r\n}","import React, {FunctionComponent, useContext} from 'react';\r\nimport \"./footer.scss\"\r\nimport BaseButton from \"../../../components/BaseButton/BaseButton\";\r\nimport Money from \"../../../components/Money/Money\";\r\nimport {PriceContext} from \"../../../contexts/PriceContext\";\r\n\r\nconst Footer: FunctionComponent<FooterInterface> = ({createReceipt}) => {\r\n    const {price} = useContext(PriceContext);\r\n    return (\r\n        <footer>\r\n            <div>Total</div>\r\n            <Money money={price}/>\r\n            <BaseButton clicked={()=>{createReceipt()}} text={\"Add receipt\"}/>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n\r\ninterface FooterInterface {\r\n    createReceipt: () => void\r\n}","import React, {useState} from 'react';\nimport './App.scss';\nimport ReceiptList from \"./ReceiptList/ReceiptList\";\nimport Footer from \"./Footer/Footer\";\nimport PriceContextProvider from \"../../contexts/PriceContext\";\n\nfunction App() {\n    const [receipts, setReceipts] = useState(0);\n\n    return (\n        <div className=\"App\">\n            <PriceContextProvider>\n                <ReceiptList receipts={receipts}/>\n                <Footer createReceipt={() => setReceipts(receipts+1)}/>\n            </PriceContextProvider>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}